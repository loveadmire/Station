/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <dirent.h>
#include <android/log.h>
#include <errno.h>
#include <dlfcn.h>
#include <cJSON.h>
#include <cJSON_Utils.h>

#include <openssl/ssl.h>
#include <app_main.h>

#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,TAG ,__VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG ,__VA_ARGS__)
#define LOGW(...) __android_log_print(ANDROID_LOG_WARN,TAG ,__VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG ,__VA_ARGS__)
#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL,TAG ,__VA_ARGS__)


#define TAG "tlsgateway"

/* Header for class com_hzlz_tlsgateway */

#ifndef _Included_com_hzlz_tlsgateway
#define _Included_com_hzlz_tlsgateway
#ifdef __cplusplus
extern "C" {
#endif
	/*
	 * Class:     com_hzlz_tlsgateway
	 * Method:    SetAppconfig
	 * Signature: (Ljava/lang/String;)I
	 */
	JNIEXPORT jint JNICALL Java_com_hzlz_tlsgateway_SetAppconfig
	(JNIEnv *env, jclass thzs, jstring jcertpath ,jbyteArray jpass) {
		const char *certpath = NULL;
		certpath = env->GetStringUTFChars(jcertpath, NULL);
		int i = 0;
		//unsigned  char  pass[16] = {0};
#if 0
		unsigned char *buff;
		if (jpass) {
			jbyte *bBuffer = env->GetByteArrayElements(jpass,NULL);
			if(bBuffer == NULL){
				LOGE("GetCharArrayElements  ERROR \n");
				return -7;
			}
			buff = (unsigned char *)bBuffer;
			LOGE("333333333333333333");
			//env->ReleaseByteArrayElements(jpass, bBuffer, 0);
		}
#endif
		int ret = 0;
		int file_len = 0;
		char file_buff	[2048] = { 0 };
		char cert_path	[256]  = { 0 };
		char ca_path	[256]  = { 0 };
		char cli_crt	[256]  = { 0 };
		char cli_enc_crt[256]  = { 0 };
		char cli_key	[256]  = { 0 };
		char cli_enc_key[256]  = { 0 };

		FILE *fp = NULL;
		fp = fopen(certpath, "rb");
		if (fp == NULL) {
			LOGE("read client certificate fail  -1 !\n");
			return -1;   //传入参数错误，配置json_file,json文件无法打开
		}
		fseek(fp, 0, SEEK_END);
		file_len = ftell(fp);
		rewind(fp);

		if (file_len > 2048) {
			LOGE("read client certificate fail -2 !\n");
			return -2;  // 配置文件过大
		}
		ret = fread(file_buff, file_len, 1, fp);
		if (ret <= 0) {
			fclose(fp);
			LOGE("read client certificate fail -3 !\n");
			return -3;  //读取文件失败
		}
		//将证书路径从配置文件写入全局字符串
		cJSON *json = cJSON_Parse(file_buff);
		if (cJSON_GetObjectItem(json, "certpath")) {
			strcpy(cert_path, cJSON_GetObjectItem(json, "certPath")->valuestring);
			if (opendir(cert_path) == NULL) {
				LOGE("read client certificate fail -4 !\n");
				return -4;
			}
			else {
				LOGE("read client certificate path is %s  !\n",cert_path);
				sprintf(ca_path, "%s%s",cert_path, "ca.crt");
				sprintf(cli_crt, "%s%s", cert_path ,"client.crt");
				sprintf(cli_key, "%s%s", cert_path,"clientkey.key");
				sprintf(cli_enc_crt, "%s%s", cert_path ,"client_enc.crt");
				sprintf(cli_enc_key, "%s%s",cert_path, "client_enc_key.key");
				LOGE("cert path is %s \n",ca_path);
				FILE *fpcli = NULL;
				fpcli = fopen(ca_path, "rb");
				LOGE("FOPEN HAHDASKDPQJWEAKDFOIWERJFGKAJGFPOWAJGPIO\n");
				if (fpcli == NULL) {
					//fclose(fpcli);
					LOGE("ca crt is not exist or can`t read :[%s] ", ca_path);
					return -5;
				}
				// LOGE("2222222222222222222222222222222222\n");
				fpcli = fopen(cli_crt, "rb");
				if (fpcli == NULL) {
					//fclose(fpcli);
					LOGE("cli_crt is not exist or can`t read :[%s] ", cli_crt);
					return -5;
				}
				 LOGE("2222222222222222222222222222222222\n");
				fpcli = fopen(cli_key, "rb");
				if (fpcli == NULL) {
					//fclose(fpcli);
					LOGE("cli_key is not exist or can`t read :[%s] ", cli_key);
					return -5;
				}
				fpcli = fopen(cli_crt, "rb");
				if (fpcli == NULL) {
					//fclose(fpcli);
					LOGE("cli_enc_crt is not exist or can`t read :[%s] ", cli_enc_crt);
					return -5;
				}
				fpcli = fopen(cli_enc_key, "rb");
				if (fpcli == NULL) {
					//fclose(fpcli);
					LOGE("cli_enc_key is not exist or can`t read :[%s] ", cli_enc_key);
					return -5;
				}				
				fclose(fpcli);
//				free(fpcli);

			}
		}
		else {
			LOGE("read client certificate fail -4 !\n");
			return -4; //json 中文件路径缺失
		}

		fclose(fp);
		
//		 int i = 0;
                //unsigned  char  pass[16] = {0};
                unsigned char *buff;
                if (jpass) {
                        jbyte *bBuffer = env->GetByteArrayElements(jpass,NULL);
                        if(bBuffer == NULL){
                                LOGE("GetCharArrayElements  ERROR \n");
                                return -7;
                        }
                        buff = (unsigned char *)bBuffer;
                        LOGE("333333333333333333");
			 ret = set_appconfig((char *)certpath,buff);
                        env->ReleaseByteArrayElements(jpass, bBuffer, 0);
                }
		else{
			ret = set_appconfig((char *)certpath,buff);
		}
		return ret;
	}

	/*
	 * Class:     com_hzlz_tlsgateway
	 * Method:    StartTunnel
	 * Signature: ()I
	 */
	JNIEXPORT jint JNICALL Java_com_hzlz_tlsgateway_StartTunnel
	(JNIEnv *env, jclass thzs) {

		int ret = start_tunnel();
		return ret;
	}

	/*
	 * Class:     com_hzlz_tlsgateway
	 * Method:    StopTunnel
	 * Signature: ()I
	 */
	JNIEXPORT jint JNICALL Java_com_hzlz_tlsgateway_StopTunnel
	(JNIEnv *env, jclass thzs) {
		int ret = stop_tunnel();
		return ret;
	}

#ifdef __cplusplus
}
#endif
#endif
